stages:
  - build
  - infra
  - deploy

variables:
  TF_VAR_region: "eu-central-1"
  TF_VAR_key_pair_name: "gitlab-ci"
  TF_VAR_public_key_path: "/root/.ssh/gitlab-ci.pub"
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

build:
  stage: build
  image: docker:24
  services:
    - docker:dind
  script:
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  only:
    - main

terraform:
  stage: infra
  image: alpine:3.18
  before_script:
    - apk add --no-cache terraform openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/gitlab-ci
    - chmod 600 ~/.ssh/gitlab-ci
    - echo "$SSH_PUBLIC_KEY" > ~/.ssh/gitlab-ci.pub
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
  script:
    - cd terraform
    - terraform version
    - terraform init
    - terraform validate
    - terraform destroy -auto-approve
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
    - terraform output -raw ec2_public_ip > ../EC2_PUBLIC_IP.txt
  artifacts:
    paths:
      - terraform/terraform.tfstate
      - terraform/terraform.tfstate.backup
      - terraform/.terraform/
      - EC2_PUBLIC_IP.txt
  only:
    - main


deploy:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add --no-cache openssh
  script:
    - export EC2_HOST=$(cat EC2_PUBLIC_IP.txt)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/gitlab-ci
    - chmod 600 ~/.ssh/gitlab-ci
    - ssh -i ~/.ssh/gitlab-ci -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
        sudo apt update &&
        sudo apt install -y make &&

        export DOCKER_IMAGE=$DOCKER_IMAGE &&

        mkdir -p /home/ubuntu/retrofun_api &&
        cd /home/ubuntu/retrofun_api &&
        
        if [ ! -d .git ]; then
          git clone https://gitlab.com/joaosr-group/retrofun_api.git .;
        else
          git pull origin main;
        fi &&
        
        echo \"DATABASE_NAME=$DATABASE_NAME\" > .env &&
        echo \"DATABASE_USERNAME=$DATABASE_USERNAME\" >> .env &&
        echo \"DATABASE_PASSWORD=$DATABASE_PASSWORD\" >> .env &&
        echo \"DATABASE_URL=$DATABASE_URL\" >> .env &&
        
        echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY &&
        
        docker-compose pull &&
        make docker
      "
  only:
    - main
